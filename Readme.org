
* Information

** Name
Theodor Thornhill - theodokt

** Email
theodokt@ifi.uio.no | theodorthornhill@icloud.com

** Telephone
+47 41649298
* Introduction
This is my attempt on the first obligatory exercise in INF5110 on UiO. The first
exercise is to build a lexer and parser for a provided grammar/language, and
produce its abstract syntax tree.
* How to build and runp
You need to have =ant= on your system, which also is recommended tool for this
exercise. It has been tested locally on my machine, and also on UiO over ssh
Run all commands from root of git repository:
** Cleaning
#+NAME: clean
#+BEGIN_SRC shell :results output :exports both
ant clean
#+END_SRC

#+RESULTS: clean
: Buildfile: /Users/theodor/Dropbox/Studier/fag/INF5110/compila04/build.xml
: 
: init:
: 
: clean:
: 
: BUILD SUCCESSFUL
: Total time: 0 seconds

** Building
#+NAME: build
#+BEGIN_SRC shell :results output :exports both
ant build
#+END_SRC

#+RESULTS: build

** Running
#+NAME: test-run
#+BEGIN_SRC shell :results output :exports both
ant run
#+END_SRC

* Results of test-run

#+RESULTS: test-run
#+begin_example
Buildfile: /Users/theodor/Dropbox/Studier/fag/INF5110/compila04/build.xml

init:

run:
     [java] Scanning done
     [java] (PROGRAM (NAME ComplexAddition)
     [java] 	(STRUCT (NAME Complex)
     [java] 		(PARAM_DECL (TYPE float)(NAME Real)
     [java] 		(PARAM_DECL (TYPE float)(NAME Imag)
     [java] 	)
     [java] 	(PROC_DECL (TYPE void) (NAME Swap)
     [java] 		(PARAM_DECL (REFTYPE (TYPE int))(NAME a)
     [java] 		(PARAM_DECL (REFTYPE (TYPE int))(NAME b)
     [java] 
     [java] 		(VAR (TYPE int)(NAME tmp))
     [java] 
     [java] 		(ASSIGN_STMT
     [java] 			(VAR (NAME tmp))
     [java] 			(VAR (NAME a))
     [java] 		)
     [java] 		(ASSIGN_STMT
     [java] 			(VAR (NAME a))
     [java] 			(VAR (NAME b))
     [java] 		)
     [java] 		(ASSIGN_STMT
     [java] 			(VAR (NAME b))
     [java] 			(VAR (NAME tmp))
     [java] 		)
     [java] 	)
     [java] 	(PROC_DECL (TYPE Complex) (NAME Add)
     [java] 		(PARAM_DECL (TYPE Complex)(NAME a)
     [java] 		(PARAM_DECL (TYPE Complex)(NAME b)
     [java] 
     [java] 		(VAR (TYPE Complex)(NAME retval))
     [java] 
     [java] 		(ASSIGN_STMT
     [java] 			(VAR (NAME retval))
     [java] 			(NEW Complex)
     [java] 		)
     [java] 		(ASSIGN_STMT
     [java] 			(VAR (NAME retval))(NAME Real)
     [java] 			)
     [java] 			(BINARY_OPERATION +
     [java] 				(VAR (NAME a))(NAME Real)
     [java] 				)
     [java] 				(VAR (NAME b))(NAME Real)
     [java] 				)
     [java] 			)
     [java] 		)
     [java] 		(ASSIGN_STMT
     [java] 			(VAR (NAME retval))(NAME Imag)
     [java] 			)
     [java] 			(BINARY_OPERATION +
     [java] 				(VAR (NAME a))(NAME Imag)
     [java] 				)
     [java] 				(VAR (NAME b))(NAME Imag)
     [java] 				)
     [java] 			)
     [java] 		)
     [java] 		(RETURN (VAR (NAME retval))
     [java] 		)
     [java] 	)
     [java] 	(PROC_DECL (TYPE int) (NAME Max)
     [java] 		(PARAM_DECL (TYPE int)(NAME a)
     [java] 		(PARAM_DECL (TYPE int)(NAME b)
     [java] 
     [java] 
     [java] 		(IF (NOT (BINARY_OPERATION >
     [java] 					(VAR (NAME a))
     [java] 					(VAR (NAME b))
     [java] 				)
     [java] 			)
     [java] 			(RETURN (VAR (NAME a))
     [java] 			)
     [java] 		)
     [java] 		(RETURN (VAR (NAME b))
     [java] 		)
     [java] 	)
     [java] 	(PROC_DECL (TYPE void) (NAME main)
     [java] 
     [java] 		(PROC_DECL (TYPE float) (NAME Square)
     [java] 			(PARAM_DECL (TYPE float)(NAME val)
     [java] 
     [java] 
     [java] 			(RETURN (BINARY_OPERATION ^
     [java] 					(VAR (NAME val))
     [java] 					(FLOAT_LITERAL 2.0)
     [java] 				)
     [java] 			)
     [java] 		)
     [java] 		(VAR (TYPE float)(NAME num))
     [java] 
     [java] 		(ASSIGN_STMT
     [java] 			(VAR (NAME num))
     [java] 			(FLOAT_LITERAL 6.480740)
     [java] 		)
     [java] 		(CALL_STMT (NAME print_float)
     [java] 			(VAR (NAME num))
     [java] 		)
     [java] 		(CALL_STMT (NAME print_str)
     [java] 			(STRING_LITERAL " squared is ")
     [java] 		)
     [java] 		(CALL_STMT (NAME print_float)
     [java] 			(CALL_STMT (NAME Square)
     [java] 				(VAR (NAME num))
     [java] 			)
     [java] 		)
     [java] 		(RETURN)
     [java] 	)
     [java] )

BUILD SUCCESSFUL
Total time: 0 seconds
#+end_example

