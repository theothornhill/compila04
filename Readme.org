* Information

** Name
Theodor Thornhill - theodokt

** Email
theodokt@ifi.uio.no | theodorthornhill@icloud.com
* Introduction
** Information about this project
*** Project structure
    This is an overview of the hierarchy of the project. 
    #+BEGIN_SRC shell :results output  :exports both
    tree -d
    #+END_SRC

    #+RESULTS:
    #+begin_example
    .
    |-- build
    |   `-- classes
    |       |-- bytecode
    |       |   |-- instructions
    |       |   `-- type
    |       |-- runtime
    |       `-- test
    |-- doc
    |   |-- bytecodeinterpinfo
    |   |-- languagespec
    |   `-- obligs
    |-- lib
    |-- src
    |   |-- cuplex
    |   |-- java
    |   |   |-- declarations
    |   |   |-- expressions
    |   |   |-- programlogic
    |   |   |-- statements
    |   |   `-- types
    |   |-- oblig2patch
    |   |   |-- doc
    |   |   `-- src
    |   |       |-- bytecode
    |   |       |   |-- instructions
    |   |       |   `-- type
    |   |       |-- compiler
    |   |       |-- runtime
    |   |       |-- test
    |   |       `-- tests
    |   |           |-- fullprograms
    |   |           `-- oblig2
    |   |               |-- errors
    |   |               `-- noerrors
    |   `-- tests
    |       |-- dummyprograms
    |       |-- errors
    |       |   |-- lexing
    |       |   |-- parsing
    |       |   `-- staticanalysis
    |       |       |-- naming
    |       |       `-- typing
    |       |           `-- typeerrors
    |       |-- fullprograms
    |       |-- outputs
    |       |   `-- ast
    |       `-- parsing
    `-- src-gen

    48 directories
    #+end_example

*** Grammar and lexer files
    The grammar and lexer files are located under =src/cuplex/=, and I use the one
    with precedence rules to run the program. There is one unambiguous grammar
    provided there as well, but I will make the ambiguous grammar as default,
    since it is easier to debug

*** Special info
   I have chosen the =in= from =begin - in - end= to be strict and only accept
   when the =in= is present.
* How to build and run

You need to have =ant=  and =java= on your system, which also is recommended tool for this
exercise. I have used Travis CI for testing, and also tested manually on UiO
pool, so things should hopefully work.

=JFlex= and =cup= should be provided in the repo and be sourced from there

Run all commands from root of git repository:
** Running ant
#+NAME: ant
#+BEGIN_SRC shell :results output :exports both
ant
#+END_SRC

#+RESULTS: ant
#+begin_example
Buildfile: /Users/theodor/Dropbox/Studier/fag/INF5110/compila04/build.xml

menu:
     [echo] Targets                             
     [echo] clean                     - Cleans up the project
     [echo] build                     - Build compiler
     [echo] run                       - Run compiler
     [echo] list-runme                - Test compiler parsing passes
     [echo] test-passing              - Test compiler parsing passes
     [echo] test-fail                 - Test compiler parsing fails

BUILD SUCCESSFUL
Total time: 0 seconds
#+end_example

** Cleaning
#+NAME: clean
#+BEGIN_SRC shell :results output :exports both
ant clean
#+END_SRC

#+RESULTS: clean
: Buildfile: /Users/theodor/Dropbox/Studier/fag/INF5110/compila04/build.xml
: 
: init:
: 
: clean:
: 
: BUILD SUCCESSFUL
: Total time: 0 seconds

** Building
#+NAME: build
#+BEGIN_SRC shell :results output :exports both
ant build
#+END_SRC

#+RESULTS: build
#+begin_example
Buildfile: /Users/theodor/Dropbox/Studier/fag/INF5110/compila04/build.xml

init:

mkdir:

generate:
      [cup] This is CUP v0.11a beta 20060608
      [cup] Authors : Scott E. Hudson, Frank Flannery, Andrea Flexeder, Michael Petter and C. Scott Ananian
      [cup] Bugreports to petter@cs.tum.edu
      [cup] checking, whether this run is necessary
      [cup] Parserfile and symbolfile are existing
      [cup] Parserfile src-gen/parser.java is actual
      [cup] Symbolfilesrc-gen/sym.java is actual
      [cup] skipping generation of ./src/cuplex/compila.cup
      [cup] use option force="true" to override

compile:
    [javac] /Users/theodor/Dropbox/Studier/fag/INF5110/compila04/build.xml:62: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds
    [javac] Compiling 91 source files to /Users/theodor/Dropbox/Studier/fag/INF5110/compila04/build/classes
    [javac] Note: Some input files use or override a deprecated API.
    [javac] Note: Recompile with -Xlint:deprecation for details.
    [javac] /Users/theodor/Dropbox/Studier/fag/INF5110/compila04/build.xml:63: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds

build:

BUILD SUCCESSFUL
Total time: 1 second
#+end_example

** Testing - failing tests
   These are the failing tests, which are suppoed to fail. I've tried to get
   some information that seems useful when parsing fails.
#+NAME: test-failing
#+BEGIN_SRC shell :results output :exports results
ant test-fail
#+END_SRC

#+RESULTS: test-failing
#+begin_example
Buildfile: /Users/theodor/Dropbox/Studier/fag/INF5110/compila04/build.xml

init:

test-fail:
     [java] Double declaration of symbol Tmp
     [java] 
     [java] 2
     [java] Double declaration of symbol a
     [java] 
     [java] 2
     [java] Symbol bar is not declared
     [java] 
     [java] 2
     [java] No Main procedure declared in program
     [java] 
     [java] 2
     [java] 32
     [java] 0
     [java] Return type differs from stated returntype
     [java] 
     [java] 2
     [java] Return type differs from stated returntype
     [java] 
     [java] 2
     [java] Procedure requires 2 arguments, but was given 1 arguments
     [java] 
     [java] 2
     [java] argument true: type bool is not the same type as param val2: type int
     [java] 
     [java] 2
     [java] Undeclared user defined return type notexist
     [java] 
     [java] 2
     [java] Return type differs from stated returntype
     [java] 
     [java] 2
     [java] Wrong type in assignment on tmp and 42
     [java] 
     [java] 2
     [java] Condition in if-statement must be boolean
     [java] 
     [java] 2
     [java] Wrong type in assignment on tmp and BinaryExpr@6f6745d6
     [java] 
     [java] 2
     [java] Condition in while-statement must be boolean
     [java] 
     [java] 2
     [java] Record not declared
     [java] 
     [java] 2
     [java] Syntax error on line: 5, [42.]
     [java] Permission ("java.lang.RuntimePermission" "exitVM") was not granted.
     [java] 
     [java] 1
     [java] Attribute not declared
     [java] 
     [java] 2
     [java] Argument of new is not declared
     [java] 
     [java] 2
     [java] Symbol bar is not declared
     [java] 
     [java] 2
     [java] Attribute not declared
     [java] 
     [java] 2
     [java] Argument of not operator not of type bool
     [java] 
     [java] 2
     [java] Arguments of artihmetic operation not correct type
     [java] 
     [java] 2
     [java] Arguments of logical operation not correct type
     [java] 
     [java] 2
     [java] Argument of new is not declared
     [java] 
     [java] 2
     [java] Argument of not operator not of type bool
     [java] 
     [java] 2
     [java] Arguments of relational operation not correct type
     [java] 
     [java] 2

BUILD SUCCESSFUL
Total time: 0 seconds
#+end_example

** Testing - passing tests
Testing the program outputs a lot of output as for now, maybe I will clean it up
at some point. Right now I wont include it in the =README=, but you can find it in
the source of the =README=.
#+NAME: test
#+BEGIN_SRC shell :results output
ant test-passing
#+END_SRC

#+RESULTS: test
#+begin_example
Buildfile: /Users/theodor/Dropbox/Studier/fag/INF5110/compila04/build.xml

init:

test-passing:
     [java] 42.042.042
     [java] 0
     [java] ""
     [java] "Printing in loop: "1""
     [java] ""
     [java] "Printing in loop: "2""
     [java] ""
     [java] "Printing in loop: "3""
     [java] ""
     [java] "Printing in loop: "4""
     [java] ""
     [java] "Printing in loop: "5""
     [java] 
     [java] 0
     [java] 4242.0
     [java] 0
     [java] 43.042
     [java] 0
     [java] 32
     [java] 0

BUILD SUCCESSFUL
Total time: 0 seconds
#+end_example

** Printout of generated bytecode
This is the bytecode you will get when running with the list option. 
#+BEGIN_SRC shell :results output :exports both
ant list-runme
#+END_SRC

#+RESULTS:
#+begin_example
Buildfile: /Users/theodor/Dropbox/Studier/fag/INF5110/compila04/build.xml

init:

list-runme:
     [java] Loading from file: /Users/theodor/Dropbox/Studier/fag/INF5110/compila04/example.bin
     [java] Variables:
     [java] 0: var void dummy
     [java] Procedures:
     [java] 0: proc string Add(void 0, void 1)
     [java]     var void 2
     [java]     0: new Complex
     [java]     3: storelocal 2
     [java]     6: loadlocal 0
     [java]     9: getfield Complex[0] {float}
     [java]     14: loadlocal 1
     [java]     17: getfield Complex[0] {float}
     [java]     22: add
     [java]     23: loadlocal 2
     [java]     26: putfield Complex[0] {float}
     [java]     31: loadlocal 0
     [java]     34: getfield Complex[1] {float}
     [java]     39: loadlocal 1
     [java]     42: getfield Complex[1] {float}
     [java]     47: add
     [java]     48: loadlocal 2
     [java]     51: putfield Complex[1] {float}
     [java]     56: loadlocal 2
     [java]     59: return
     [java] 1: proc int Max(int 0, int 1)
     [java]     var int 2
     [java]     0: loadlocal 0
     [java]     3: loadlocal 1
     [java]     6: gt
     [java]     7: jmpfalse 19
     [java]     10: loadlocal 0
     [java]     13: storelocal 2
     [java]     16: jmp 26
     [java]     19: nop
     [java]     20: loadlocal 1
     [java]     23: storelocal 2
     [java]     26: nop
     [java]     27: loadlocal 2
     [java]     30: return
     [java] 2: proc void printCmplx(void 0)
     [java]     0: pushstring ""Real ""
     [java]     3: call printstr {3}
     [java]     6: loadlocal 0
     [java]     9: getfield Complex[0] {float}
     [java]     14: call printfloat {4}
     [java]     17: pushstring """"
     [java]     20: call printline {5}
     [java]     23: pushstring ""Imag ""
     [java]     26: call printstr {3}
     [java]     29: loadlocal 0
     [java]     32: getfield Complex[1] {float}
     [java]     37: call printfloat {4}
     [java]     40: pushstring """"
     [java]     43: call printline {5}
     [java]     46: return
     [java] 3: proc string printstr()
     [java] 4: proc float printfloat()
     [java] 5: proc string printline()
     [java] 6: proc string printstr()
     [java] 7: proc float printfloat()
     [java] 8: proc string printline()
     [java] 9: proc void test()
     [java]     var void 0
     [java]     var void 1
     [java]     var void 2
     [java]     var int 3
     [java]     var int 4
     [java]     var int 5
     [java]     0: new Complex
     [java]     3: storelocal 0
     [java]     6: new Complex
     [java]     9: storelocal 1
     [java]     12: pushint 1
     [java]     17: loadlocal 0
     [java]     20: putfield Complex[0] {float}
     [java]     25: pushint 2
     [java]     30: loadlocal 0
     [java]     33: putfield Complex[1] {float}
     [java]     38: pushint 3
     [java]     43: loadlocal 1
     [java]     46: putfield Complex[0] {float}
     [java]     51: pushint 4
     [java]     56: loadlocal 1
     [java]     59: putfield Complex[1] {float}
     [java]     64: loadlocal 0
     [java]     67: loadlocal 1
     [java]     70: call Add {0}
     [java]     73: call printCmplx {2}
     [java]     76: pushint 3
     [java]     81: storelocal 3
     [java]     84: pushint 7
     [java]     89: storelocal 4
     [java]     92: loadlocal 4
     [java]     95: loadlocal 3
     [java]     98: call Max {1}
     [java]     101: storelocal 5
     [java]     104: return
     [java] 10: proc void printStr(string 0)
     [java]     0: pushstring ""Navn ""
     [java]     3: loadlocal 0
     [java]     6: add
     [java]     7: storelocal 0
     [java]     10: loadlocal 0
     [java]     13: call printstr {3}
     [java]     16: return
     [java] 11: proc string printstr()
     [java] 12: proc void inOutTest()
     [java]     var int 0
     [java]     var int 1
     [java]     0: pushstring ""skriv v1""
     [java]     3: call printline {5}
     [java]     6: call readint {14}
     [java]     9: storelocal 0
     [java]     12: pushstring ""skriv v2""
     [java]     15: call printline {5}
     [java]     18: call readint {14}
     [java]     21: storelocal 1
     [java]     24: pushstring ""Storst ""
     [java]     27: call printstr {3}
     [java]     30: loadlocal 0
     [java]     33: loadlocal 1
     [java]     36: call Max {1}
     [java]     39: call printint {18}
     [java]     42: pushstring """"
     [java]     45: call printline {5}
     [java]     48: return
     [java] 13: proc string printline()
     [java] 14: proc int readint()
     [java] 15: proc string printline()
     [java] 16: proc int readint()
     [java] 17: proc string printstr()
     [java] 18: proc int printint()
     [java] 19: proc string printline()
     [java] 20: proc void Main()
     [java]     var float 0
     [java]     var int 1
     [java]     var string 2
     [java]     0: pushfloat 6.48074
     [java]     5: storelocal 0
     [java]     8: loadlocal 0
     [java]     11: call printfloat {4}
     [java]     14: pushstring """"
     [java]     17: call printline {5}
     [java]     20: pushint 7
     [java]     25: storelocal 1
     [java]     28: loadlocal 1
     [java]     31: call printint {18}
     [java]     34: pushstring """"
     [java]     37: call printline {5}
     [java]     40: pushstring ""TestNavn""
     [java]     43: storelocal 2
     [java]     46: loadlocal 2
     [java]     49: call printStr {10}
     [java]     52: pushstring """"
     [java]     55: call printline {5}
     [java]     58: call test {9}
     [java]     61: call inOutTest {12}
     [java]     64: new Complex
     [java]     67: storeglobal dummy{void}
     [java]     70: pushfloat 1.0
     [java]     75: loadglobal dummy
     [java]     78: putfield Complex[0] {float}
     [java]     83: pushfloat 2.0
     [java]     88: loadglobal dummy
     [java]     91: putfield Complex[1] {float}
     [java]     96: loadglobal dummy
     [java]     99: call printCmplx {2}
     [java]     102: pushstring ""DONE""
     [java]     105: call printline {5}
     [java]     108: return
     [java] 21: proc float printfloat()
     [java] 22: proc string printline()
     [java] 23: proc int printint()
     [java] 24: proc string printline()
     [java] 25: proc string printline()
     [java] 26: proc string printline()
     [java] Structs:
     [java] 0: Complex
     [java]     0: float
     [java]     1: float
     [java] Constants:
     [java] 0: "Real "
     [java] 1: ""
     [java] 2: "Imag "
     [java] 3: ""
     [java] 4: "Navn "
     [java] 5: "skriv v1"
     [java] 6: "skriv v2"
     [java] 7: "Storst "
     [java] 8: ""
     [java] 9: ""
     [java] 10: ""
     [java] 11: "TestNavn"
     [java] 12: ""
     [java] 13: "DONE"
     [java] STARTWITH: Main
     [java] 
     [java] 0

BUILD SUCCESSFUL
Total time: 0 seconds
#+end_example

** Running the program
Run the program by running this command:
#+NAME: test-run
#+BEGIN_SRC shell :results output :exports both
ant run
#+END_SRC

* Results of run
 
#+RESULTS: test-run
#+begin_example
Buildfile: /Users/theodor/Dropbox/Studier/fag/INF5110/compila04/build.xml

init:

run:
     [java] 6.48074""
     [java] 7""
     [java] "Navn ""TestNavn"""
     [java] "Real "4.0""
     [java] "Imag "6.0""
     [java] "skriv v1"
54
     [java] "skriv v2"
234
     [java] "Storst "234""
     [java] "Real "1.0""
     [java] "Imag "2.0""
     [java] "DONE"
     [java] 
     [java] 0

BUILD SUCCESSFUL
Total time: 1 second
#+end_example

* Notes 
** Discussion
*** Data structure
    I have implemented the [[file:src/java/programlogic/SymbolTable.java::}][symbol table]] as a =HashMap= with =String= as key and
    =Object= as value. I've chosen to view a normal java class as a =HashMap= of its
    own, where instance variables act as nested key,value-pairs. In this way I
    have to do quite a lot of casting, but I gain a fairly flexible data
    structure. I thought a lot and hard about this, and couldn't really find
    another way. As such to implement the lexical scoping, I let every object in
    the data structure know what scope created it. This enables me to traverse
    backwards in the symbol tree without having to rely on explicit naming of
    the different scopes on the same level. I discuss this further in [[*Attribute grammar][Attribute grammar]]
*** Attribute grammar
    I have included an =Interface= called [[file:src/java/programlogic/AttributeGrammar.java::}][AttributeGrammar]] that the [[file:src/java/declarations/Decl.java::}][decls]] and
    [[file:src/java/statements/Stmt.java::}][stmts]] implement. This is what helps me implement the [[file:src/java/programlogic/SymbolTable.java::}][symbol table]], and is
    used during the bottom-up parsing. 

