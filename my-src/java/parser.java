
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.FileReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.ByteArrayInputStream;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\007\000\002\034" +
    "\003\000\002\034\005\000\002\034\002\000\002\035\003" +
    "\000\002\035\005\000\002\035\002\000\002\037\003\000" +
    "\002\037\005\000\002\037\002\000\002\036\003\000\002" +
    "\036\005\000\002\036\002\000\002\040\003\000\002\040" +
    "\005\000\002\040\002\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\006\000\002\014\007\000" +
    "\002\015\005\000\002\013\014\000\002\013\016\000\002" +
    "\016\005\000\002\016\004\000\002\016\005\000\002\016" +
    "\003\000\002\016\003\000\002\016\004\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\003\000\002" +
    "\031\005\000\002\031\005\000\002\031\003\000\002\032" +
    "\005\000\002\032\003\000\002\033\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\027\003\000" +
    "\002\027\003\000\002\021\003\000\002\021\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\004\005\000\002\004\005" +
    "\000\002\005\007\000\002\005\011\000\002\006\007\000" +
    "\002\007\004\000\002\007\003\000\002\010\006\000\002" +
    "\023\003\000\002\023\005\000\002\024\006\000\002\025" +
    "\006\000\002\025\006\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\004\004\005\001\002\000\004\002\232\001" +
    "\002\000\004\067\006\001\002\000\004\005\007\001\002" +
    "\000\014\006\ufffd\012\ufffd\016\012\017\017\020\016\001" +
    "\002\000\010\006\uffff\007\uffff\012\uffff\001\002\000\010" +
    "\006\ufff0\007\ufff0\012\ufff0\001\002\000\004\067\223\001" +
    "\002\000\006\006\222\012\050\001\002\000\010\006\uffee" +
    "\007\uffee\012\uffee\001\002\000\010\006\uffef\007\uffef\012" +
    "\uffef\001\002\000\004\067\217\001\002\000\004\067\020" +
    "\001\002\000\004\010\021\001\002\000\010\011\ufff4\013" +
    "\ufff4\067\024\001\002\000\006\011\041\013\040\001\002" +
    "\000\006\011\ufff6\013\ufff6\001\002\000\004\042\025\001" +
    "\002\000\016\032\027\063\033\064\034\065\026\066\031" +
    "\067\032\001\002\000\020\005\uffad\006\uffad\007\uffad\011" +
    "\uffad\012\uffad\013\uffad\015\uffad\001\002\000\004\010\035" +
    "\001\002\000\012\011\uffeb\012\uffeb\013\uffeb\015\uffeb\001" +
    "\002\000\020\005\uffac\006\uffac\007\uffac\011\uffac\012\uffac" +
    "\013\uffac\015\uffac\001\002\000\020\005\uffab\006\uffab\007" +
    "\uffab\011\uffab\012\uffab\013\uffab\015\uffab\001\002\000\020" +
    "\005\uffaf\006\uffaf\007\uffaf\011\uffaf\012\uffaf\013\uffaf\015" +
    "\uffaf\001\002\000\020\005\uffae\006\uffae\007\uffae\011\uffae" +
    "\012\uffae\013\uffae\015\uffae\001\002\000\016\032\027\063" +
    "\033\064\034\065\026\066\031\067\032\001\002\000\004" +
    "\011\037\001\002\000\020\005\uffaa\006\uffaa\007\uffaa\011" +
    "\uffaa\012\uffaa\013\uffaa\015\uffaa\001\002\000\004\067\024" +
    "\001\002\000\006\005\042\042\043\001\002\000\014\007" +
    "\ufffd\012\ufffd\016\012\017\017\020\016\001\002\000\016" +
    "\032\027\063\033\064\034\065\026\066\031\067\032\001" +
    "\002\000\004\005\045\001\002\000\014\007\ufffd\012\ufffd" +
    "\016\012\017\017\020\016\001\002\000\006\007\047\012" +
    "\050\001\002\000\044\006\ufffa\010\111\012\ufffa\021\077" +
    "\022\061\026\053\031\055\032\062\033\073\034\065\035" +
    "\066\036\104\037\060\040\074\044\054\045\106\067\056" +
    "\001\002\000\010\016\012\017\017\020\016\001\002\000" +
    "\010\006\ufffe\007\ufffe\012\ufffe\001\002\000\014\006\uffbf" +
    "\012\uffbf\023\uffbf\025\uffbf\030\uffbf\001\002\000\032\010" +
    "\111\021\077\032\062\033\073\034\065\035\066\036\104" +
    "\037\060\040\074\044\054\045\106\067\056\001\002\000" +
    "\032\010\111\021\077\032\062\033\073\034\065\035\066" +
    "\036\104\037\060\040\074\044\054\045\106\067\056\001" +
    "\002\000\044\006\uffb6\010\111\012\uffb6\021\077\023\uffb6" +
    "\025\uffb6\030\uffb6\032\062\033\073\034\065\035\066\036" +
    "\104\037\060\040\074\044\054\045\106\067\056\001\002" +
    "\000\052\006\uffb4\010\176\011\uffb4\012\uffb4\013\uffb4\023" +
    "\uffb4\024\uffb4\025\uffb4\027\uffb4\030\uffb4\041\uffb4\043\uffb4" +
    "\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\061" +
    "\uffb4\062\uffb4\001\002\000\024\041\123\046\127\047\130" +
    "\050\124\051\120\052\122\053\121\061\116\062\131\001" +
    "\002\000\060\006\uffc5\011\uffc5\012\uffc5\013\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\027\uffc5\030\uffc5\041\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\001\002\000" +
    "\032\010\111\021\077\032\062\033\073\034\065\035\066" +
    "\036\104\037\060\040\074\044\054\045\106\067\056\001" +
    "\002\000\004\010\164\001\002\000\006\006\162\012\161" +
    "\001\002\000\046\006\uffe1\011\uffe1\012\uffe1\013\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\027\uffe1\030\uffe1\041\uffe1\046\uffe1" +
    "\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\061\uffe1\062" +
    "\uffe1\001\002\000\060\006\uffd4\011\uffd4\012\uffd4\013\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\027\uffd4\030\uffd4\041\uffd4\046" +
    "\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4" +
    "\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\001" +
    "\002\000\060\006\uffd5\011\uffd5\012\uffd5\013\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\027\uffd5\030\uffd5\041\uffd5\046\uffd5\047" +
    "\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5" +
    "\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\001\002\000" +
    "\026\041\uffe0\043\157\046\uffe0\047\uffe0\050\uffe0\051\uffe0" +
    "\052\uffe0\053\uffe0\061\uffe0\062\uffe0\001\002\000\060\006" +
    "\uffd2\011\uffd2\012\uffd2\013\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\027\uffd2\030\uffd2\041\uffd2\046\uffd2\047\uffd2\050\uffd2\051" +
    "\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2" +
    "\060\uffd2\061\uffd2\062\uffd2\001\002\000\056\006\uffdc\011" +
    "\uffdc\012\uffdc\013\uffdc\023\uffdc\024\uffdc\025\uffdc\027\uffdc" +
    "\030\uffdc\041\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052" +
    "\uffdc\053\uffdc\054\uffdc\055\uffdc\056\142\057\143\061\uffdc" +
    "\062\uffdc\001\002\000\014\006\uffbe\012\uffbe\023\uffbe\025" +
    "\uffbe\030\uffbe\001\002\000\004\010\152\001\002\000\060" +
    "\006\uffc4\011\uffc4\012\uffc4\013\uffc4\023\uffc4\024\uffc4\025" +
    "\uffc4\027\uffc4\030\uffc4\041\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057" +
    "\uffc4\060\uffc4\061\uffc4\062\uffc4\001\002\000\060\006\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\023\uffd6\024\uffd6\025\uffd6\027" +
    "\uffd6\030\uffd6\041\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6" +
    "\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060" +
    "\uffd6\061\uffd6\062\uffd6\001\002\000\014\006\uffc0\012\uffc0" +
    "\023\uffc0\025\uffc0\030\uffc0\001\002\000\004\067\151\001" +
    "\002\000\060\006\uffd7\011\uffd7\012\uffd7\013\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\027\uffd7\030\uffd7\041\uffd7\046\uffd7\047" +
    "\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7" +
    "\056\uffd7\057\uffd7\060\147\061\uffd7\062\uffd7\001\002\000" +
    "\056\006\uffd9\011\uffd9\012\uffd9\013\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\027\uffd9\030\uffd9\041\uffd9\046\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9" +
    "\057\uffd9\061\uffd9\062\uffd9\001\002\000\052\006\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\023\uffe5\024\uffe5\025\uffe5\027\uffe5" +
    "\030\uffe5\041\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052" +
    "\uffe5\053\uffe5\054\137\055\140\061\uffe5\062\uffe5\001\002" +
    "\000\026\041\uffe2\043\135\046\uffe2\047\uffe2\050\uffe2\051" +
    "\uffe2\052\uffe2\053\uffe2\061\uffe2\062\uffe2\001\002\000\060" +
    "\006\uffd3\011\uffd3\012\uffd3\013\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\027\uffd3\030\uffd3\041\uffd3\046\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057" +
    "\uffd3\060\uffd3\061\uffd3\062\uffd3\001\002\000\036\006\uffbd" +
    "\012\uffbd\023\uffbd\025\uffbd\030\uffbd\041\uffe4\046\uffe4\047" +
    "\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\061\uffe4\062\uffe4" +
    "\001\002\000\060\006\uffd1\011\uffd1\012\uffd1\013\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\027\uffd1\030\uffd1\041\uffd1\046\uffd1" +
    "\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055" +
    "\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\001\002" +
    "\000\014\006\uffc1\012\uffc1\023\uffc1\025\uffc1\030\uffc1\001" +
    "\002\000\014\006\ufffc\012\ufffc\023\ufffc\025\ufffc\030\ufffc" +
    "\001\002\000\032\010\111\021\077\032\062\033\073\034" +
    "\065\035\066\036\104\037\060\040\074\044\054\045\106" +
    "\067\056\001\002\000\026\011\126\041\123\046\127\047" +
    "\130\050\124\051\120\052\122\053\121\061\116\062\131" +
    "\001\002\000\046\006\uffe0\011\uffe0\012\uffe0\013\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\027\uffe0\030\uffe0\041\uffe0\046\uffe0" +
    "\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\061\uffe0\062" +
    "\uffe0\001\002\000\046\006\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\027\uffe4\030\uffe4\041\uffe4\046" +
    "\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\061\uffe4" +
    "\062\uffe4\001\002\000\046\006\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\027\uffe2\030\uffe2\041\uffe2" +
    "\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\061" +
    "\uffe2\062\uffe2\001\002\000\032\010\uffc3\021\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\044" +
    "\uffc3\045\uffc3\067\uffc3\001\002\000\032\010\111\021\077" +
    "\032\062\033\073\034\065\035\066\036\104\037\060\040" +
    "\074\044\054\045\106\067\056\001\002\000\032\010\uffcd" +
    "\021\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\044\uffcd\045\uffcd\067\uffcd\001\002\000\032" +
    "\010\uffcb\021\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\044\uffcb\045\uffcb\067\uffcb\001\002" +
    "\000\032\010\uffcc\021\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\044\uffcc\045\uffcc\067\uffcc" +
    "\001\002\000\004\067\133\001\002\000\032\010\uffce\021" +
    "\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce" +
    "\040\uffce\044\uffce\045\uffce\067\uffce\001\002\000\032\010" +
    "\111\021\077\032\062\033\073\034\065\035\066\036\104" +
    "\037\060\040\074\044\054\045\106\067\056\001\002\000" +
    "\046\006\uffdf\011\uffdf\012\uffdf\013\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\027\uffdf\030\uffdf\041\uffdf\046\uffdf\047\uffdf\050" +
    "\uffdf\051\uffdf\052\uffdf\053\uffdf\061\uffdf\062\uffdf\001\002" +
    "\000\032\010\uffd0\021\uffd0\032\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\044\uffd0\045\uffd0\067\uffd0" +
    "\001\002\000\032\010\uffcf\021\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\044\uffcf\045\uffcf" +
    "\067\uffcf\001\002\000\032\010\uffc2\021\uffc2\032\uffc2\033" +
    "\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\044\uffc2" +
    "\045\uffc2\067\uffc2\001\002\000\046\006\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\023\uffe8\024\uffe8\025\uffe8\027\uffe8\030\uffe8" +
    "\041\123\046\127\047\130\050\124\051\120\052\122\053" +
    "\121\061\116\062\131\001\002\000\050\006\uffb3\011\uffb3" +
    "\012\uffb3\013\uffb3\023\uffb3\024\uffb3\025\uffb3\027\uffb3\030" +
    "\uffb3\041\uffb3\043\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\052\uffb3\053\uffb3\061\uffb3\062\uffb3\001\002\000\046\006" +
    "\uffe6\011\uffe6\012\uffe6\013\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\027\uffe6\030\uffe6\041\123\046\127\047\130\050\124\051" +
    "\120\052\122\053\121\061\116\062\131\001\002\000\032" +
    "\010\111\021\077\032\062\033\073\034\065\035\066\036" +
    "\104\037\060\040\074\044\054\045\106\067\056\001\002" +
    "\000\036\006\uffbc\012\uffbc\023\uffbc\025\uffbc\030\uffbc\041" +
    "\123\046\127\047\130\050\124\051\120\052\122\053\121" +
    "\061\116\062\131\001\002\000\016\034\065\035\066\036" +
    "\104\037\060\040\074\045\106\001\002\000\016\034\065" +
    "\035\066\036\104\037\060\040\074\045\106\001\002\000" +
    "\056\006\uffdd\011\uffdd\012\uffdd\013\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\027\uffdd\030\uffdd\041\uffdd\046\uffdd\047\uffdd\050" +
    "\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\142" +
    "\057\143\061\uffdd\062\uffdd\001\002\000\016\034\065\035" +
    "\066\036\104\037\060\040\074\045\106\001\002\000\016" +
    "\034\065\035\066\036\104\037\060\040\074\045\106\001" +
    "\002\000\056\006\uffda\011\uffda\012\uffda\013\uffda\023\uffda" +
    "\024\uffda\025\uffda\027\uffda\030\uffda\041\uffda\046\uffda\047" +
    "\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda" +
    "\056\uffda\057\uffda\061\uffda\062\uffda\001\002\000\056\006" +
    "\uffdb\011\uffdb\012\uffdb\013\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\027\uffdb\030\uffdb\041\uffdb\046\uffdb\047\uffdb\050\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb" +
    "\061\uffdb\062\uffdb\001\002\000\056\006\uffde\011\uffde\012" +
    "\uffde\013\uffde\023\uffde\024\uffde\025\uffde\027\uffde\030\uffde" +
    "\041\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053" +
    "\uffde\054\uffde\055\uffde\056\142\057\143\061\uffde\062\uffde" +
    "\001\002\000\016\034\065\035\066\036\104\037\060\040" +
    "\074\045\106\001\002\000\056\006\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\023\uffd8\024\uffd8\025\uffd8\027\uffd8\030\uffd8\041" +
    "\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8" +
    "\054\uffd8\055\uffd8\056\uffd8\057\uffd8\061\uffd8\062\uffd8\001" +
    "\002\000\046\006\uffe3\011\uffe3\012\uffe3\013\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\027\uffe3\030\uffe3\041\uffe3\046\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\061\uffe3\062\uffe3" +
    "\001\002\000\032\010\111\021\077\032\062\033\073\034" +
    "\065\035\066\036\104\037\060\040\074\044\054\045\106" +
    "\067\056\001\002\000\026\011\156\041\uffe0\046\uffe0\047" +
    "\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\061\uffe0\062\uffe0" +
    "\001\002\000\026\011\155\041\uffe2\046\uffe2\047\uffe2\050" +
    "\uffe2\051\uffe2\052\uffe2\053\uffe2\061\uffe2\062\uffe2\001\002" +
    "\000\050\006\uffb1\011\uffb1\012\uffb1\013\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\027\uffb1\030\uffb1\041\uffb1\043\uffb1\046\uffb1" +
    "\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\061\uffb1\062" +
    "\uffb1\001\002\000\050\006\uffb0\011\uffb0\012\uffb0\013\uffb0" +
    "\023\uffb0\024\uffb0\025\uffb0\027\uffb0\030\uffb0\041\uffb0\043" +
    "\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0" +
    "\061\uffb0\062\uffb0\001\002\000\032\010\111\021\077\032" +
    "\062\033\073\034\065\035\066\036\104\037\060\040\074" +
    "\044\054\045\106\067\056\001\002\000\036\006\uffbb\012" +
    "\uffbb\023\uffbb\025\uffbb\030\uffbb\041\123\046\127\047\130" +
    "\050\124\051\120\052\122\053\121\061\116\062\131\001" +
    "\002\000\040\010\111\021\077\022\061\026\053\031\055" +
    "\032\062\033\073\034\065\035\066\036\104\037\060\040" +
    "\074\044\054\045\106\067\056\001\002\000\010\006\uffe9" +
    "\007\uffe9\012\uffe9\001\002\000\014\006\ufffb\012\ufffb\023" +
    "\ufffb\025\ufffb\030\ufffb\001\002\000\032\010\111\021\077" +
    "\032\062\033\073\034\065\035\066\036\104\037\060\040" +
    "\074\044\054\045\106\067\056\001\002\000\026\011\166" +
    "\041\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\061\uffe2\062\uffe2\001\002\000\046\006\uffb2\011\uffb2" +
    "\012\uffb2\013\uffb2\023\uffb2\024\uffb2\025\uffb2\027\uffb2\030" +
    "\uffb2\041\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\061\uffb2\062\uffb2\001\002\000\026\024\170\041" +
    "\123\046\127\047\130\050\124\051\120\052\122\053\121" +
    "\061\116\062\131\001\002\000\046\010\111\012\ufffa\021" +
    "\077\022\061\023\ufffa\025\ufffa\026\053\031\055\032\062" +
    "\033\073\034\065\035\066\036\104\037\060\040\074\044" +
    "\054\045\106\067\056\001\002\000\010\012\161\023\172" +
    "\025\173\001\002\000\014\006\uffba\012\uffba\023\uffba\025" +
    "\uffba\030\uffba\001\002\000\044\010\111\012\ufffa\021\077" +
    "\022\061\023\ufffa\026\053\031\055\032\062\033\073\034" +
    "\065\035\066\036\104\037\060\040\074\044\054\045\106" +
    "\067\056\001\002\000\006\012\161\023\175\001\002\000" +
    "\014\006\uffb9\012\uffb9\023\uffb9\025\uffb9\030\uffb9\001\002" +
    "\000\036\010\111\011\ufff1\013\ufff1\021\077\032\062\033" +
    "\073\034\065\035\066\036\104\037\060\040\074\044\054" +
    "\045\106\067\056\001\002\000\030\011\ufff3\013\ufff3\041" +
    "\123\046\127\047\130\050\124\051\120\052\122\053\121" +
    "\061\116\062\131\001\002\000\006\011\202\013\201\001" +
    "\002\000\032\010\111\021\077\032\062\033\073\034\065" +
    "\035\066\036\104\037\060\040\074\044\054\045\106\067" +
    "\056\001\002\000\046\006\uffb5\011\uffb5\012\uffb5\013\uffb5" +
    "\023\uffb5\024\uffb5\025\uffb5\027\uffb5\030\uffb5\041\uffb5\046" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\061\uffb5" +
    "\062\uffb5\001\002\000\030\011\ufff2\013\ufff2\041\123\046" +
    "\127\047\130\050\124\051\120\052\122\053\121\061\116" +
    "\062\131\001\002\000\036\006\uffb7\012\uffb7\023\uffb7\025" +
    "\uffb7\030\uffb7\041\123\046\127\047\130\050\124\051\120" +
    "\052\122\053\121\061\116\062\131\001\002\000\046\006" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\027\uffe7\030\uffe7\041\123\046\127\047\130\050\124\051" +
    "\120\052\122\053\121\061\uffe7\062\uffe7\001\002\000\026" +
    "\027\207\041\123\046\127\047\130\050\124\051\120\052" +
    "\122\053\121\061\116\062\131\001\002\000\044\010\111" +
    "\012\ufffa\021\077\022\061\026\053\030\ufffa\031\055\032" +
    "\062\033\073\034\065\035\066\036\104\037\060\040\074" +
    "\044\054\045\106\067\056\001\002\000\006\012\161\030" +
    "\211\001\002\000\014\006\uffb8\012\uffb8\023\uffb8\025\uffb8" +
    "\030\uffb8\001\002\000\006\007\213\012\050\001\002\000" +
    "\044\006\ufffa\010\111\012\ufffa\021\077\022\061\026\053" +
    "\031\055\032\062\033\073\034\065\035\066\036\104\037" +
    "\060\040\074\044\054\045\106\067\056\001\002\000\006" +
    "\006\215\012\161\001\002\000\010\006\uffea\007\uffea\012" +
    "\uffea\001\002\000\006\011\ufff5\013\ufff5\001\002\000\004" +
    "\042\220\001\002\000\016\032\027\063\033\064\034\065" +
    "\026\066\031\067\032\001\002\000\010\006\uffed\007\uffed" +
    "\012\uffed\001\002\000\004\002\000\001\002\000\004\014" +
    "\224\001\002\000\010\012\ufff7\015\ufff7\067\024\001\002" +
    "\000\006\012\227\015\230\001\002\000\006\012\ufff9\015" +
    "\ufff9\001\002\000\004\067\024\001\002\000\010\006\uffec" +
    "\007\uffec\012\uffec\001\002\000\006\012\ufff8\015\ufff8\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\011\007\012\013" +
    "\013\014\014\010\034\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\022\036\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\215\001" +
    "\001\000\002\001\001\000\014\011\007\012\013\013\014" +
    "\014\010\034\211\001\001\000\004\017\043\001\001\000" +
    "\002\001\001\000\014\011\007\012\013\013\014\014\010" +
    "\034\045\001\001\000\002\001\001\000\044\003\107\004" +
    "\106\005\075\006\051\007\071\010\104\016\056\023\102" +
    "\024\063\025\066\026\074\027\067\030\101\031\070\032" +
    "\100\033\077\035\062\001\001\000\012\011\050\012\013" +
    "\013\014\014\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\010\113\016\205\023\114\024\063\025\112" +
    "\026\074\027\067\030\101\031\070\032\100\033\077\001" +
    "\001\000\030\010\113\016\204\023\114\024\063\025\112" +
    "\026\074\027\067\030\101\031\070\032\100\033\077\001" +
    "\001\000\030\010\113\016\203\023\114\024\063\025\112" +
    "\026\074\027\067\030\101\031\070\032\100\033\077\001" +
    "\001\000\002\001\001\000\006\020\116\021\124\001\001" +
    "\000\002\001\001\000\030\010\113\016\166\023\114\024" +
    "\063\025\112\026\074\027\067\030\101\031\070\032\100" +
    "\033\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\010\113\016\111\023\114" +
    "\024\063\025\112\026\074\027\067\030\101\031\070\032" +
    "\100\033\077\001\001\000\006\020\116\021\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\010\113\016\133\023\114\024\063" +
    "\025\112\026\074\027\067\030\101\031\070\032\100\033" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\010" +
    "\113\016\131\023\114\024\063\025\112\026\074\027\067" +
    "\030\101\031\070\032\100\033\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\116\021\124\001\001\000\002\001\001\000" +
    "\006\020\116\021\124\001\001\000\030\010\113\016\135" +
    "\023\114\024\063\025\112\026\074\027\067\030\101\031" +
    "\070\032\100\033\077\001\001\000\006\020\116\021\124" +
    "\001\001\000\014\026\074\027\067\031\145\032\100\033" +
    "\077\001\001\000\014\026\074\027\067\031\140\032\100" +
    "\033\077\001\001\000\002\001\001\000\012\026\074\027" +
    "\067\032\144\033\077\001\001\000\012\026\074\027\067" +
    "\032\143\033\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\026\074\027\067\032\147" +
    "\033\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\010\113\016\056\023\153\024\063\025\152\026\074" +
    "\027\067\030\101\031\070\032\100\033\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\010\113\016\157\023\114\024\063\025" +
    "\112\026\074\027\067\030\101\031\070\032\100\033\077" +
    "\001\001\000\006\020\116\021\124\001\001\000\042\003" +
    "\162\004\106\005\075\006\051\007\071\010\104\016\056" +
    "\023\102\024\063\025\066\026\074\027\067\030\101\031" +
    "\070\032\100\033\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\010\113\016\056\023\164\024\063\025" +
    "\112\026\074\027\067\030\101\031\070\032\100\033\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\116\021\124\001\001\000\044\003\107\004\106\005\075" +
    "\006\051\007\071\010\104\016\056\023\102\024\063\025" +
    "\066\026\074\027\067\030\101\031\070\032\100\033\077" +
    "\035\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\003\107\004\106\005\075\006\051\007\071\010\104" +
    "\016\056\023\102\024\063\025\066\026\074\027\067\030" +
    "\101\031\070\032\100\033\077\035\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\010\113\016\176\023" +
    "\114\024\063\025\112\026\074\027\067\030\101\031\070" +
    "\032\100\033\077\040\177\001\001\000\006\020\116\021" +
    "\124\001\001\000\002\001\001\000\030\010\113\016\202" +
    "\023\114\024\063\025\112\026\074\027\067\030\101\031" +
    "\070\032\100\033\077\001\001\000\002\001\001\000\006" +
    "\020\116\021\124\001\001\000\006\020\116\021\124\001" +
    "\001\000\006\020\116\021\124\001\001\000\006\020\116" +
    "\021\124\001\001\000\044\003\107\004\106\005\075\006" +
    "\051\007\071\010\104\016\056\023\102\024\063\025\066" +
    "\026\074\027\067\030\101\031\070\032\100\033\077\035" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\003\107\004\106\005\075\006\051\007" +
    "\071\010\104\016\056\023\102\024\063\025\066\026\074" +
    "\027\067\030\101\031\070\032\100\033\077\035\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\225" +
    "\037\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\230\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


public void syntax_error(Symbol s) {
    System.err.printf("Syntax error on: [line: %s, column: %s, value: %s]\n",
                                s.left + 1, s.right + 1, s.value);
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= PROGRAM NAME BEGIN decl_list END 
            {
              Program RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Decl> dl = (LinkedList<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Program(name, dl);
                                  System.out.println(RESULT.printAst()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decl_list ::= decl 
            {
              LinkedList<Decl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Decl> l = new LinkedList<Decl>();
                                l.add(d);
                                RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_list ::= decl_list SEMI decl 
            {
              LinkedList<Decl> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Decl> dl = (LinkedList<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 dl.add(d); RESULT = dl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl_list ::= 
            {
              LinkedList<Decl> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt_list ::= stmt 
            {
              LinkedList<Stmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Stmt> l = new LinkedList<>();
                                 l.add(s);
                                 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt_list ::= stmt_list SEMI stmt 
            {
              LinkedList<Stmt> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Stmt> sl = (LinkedList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 sl.add(s); RESULT = sl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt_list ::= 
            {
              LinkedList<Stmt> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // param_list_semi ::= paramfield_decl 
            {
              LinkedList<Param> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Param> l = new LinkedList<>();
                                           l.add(p);
                                           RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list_semi",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // param_list_semi ::= param_list_semi SEMI paramfield_decl 
            {
              LinkedList<Param> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Param> pl = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pl.add(p); RESULT = pl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list_semi",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // param_list_semi ::= 
            {
              LinkedList<Param> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list_semi",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // param_list_comma ::= paramfield_decl 
            {
              LinkedList<Param> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Param> l = new LinkedList<>();
                                           l.add(p);
                                           RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list_comma",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // param_list_comma ::= param_list_comma COMMA paramfield_decl 
            {
              LinkedList<Param> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Param> pl = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pl.add(p); RESULT = pl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list_comma",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // param_list_comma ::= 
            {
              LinkedList<Param> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list_comma",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp_list ::= exp 
            {
              LinkedList<Object> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Object> l = new LinkedList<>();
                                          l.add(e);
                                          RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp_list ::= exp_list COMMA exp 
            {
              LinkedList<Object> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Object> el = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 el.add(e); RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp_list ::= 
            {
              LinkedList<Object> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // decl ::= rec_decl 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decl ::= proc_decl 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // decl ::= var_decl 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_decl ::= VAR_DECL NAME COLON type 
            {
              Decl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDecl(name, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // rec_decl ::= REC_DECL NAME LCURLY param_list_semi RCURLY 
            {
              Decl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Param> pl = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RecDecl(name, pl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rec_decl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // paramfield_decl ::= NAME COLON type 
            {
              Param RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(name, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramfield_decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // proc_decl ::= PROC_DECL NAME LPAR param_list_comma RPAR BEGIN decl_list IN stmt_list END 
            {
              Decl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Param> pl = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Decl> dl = (LinkedList<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Stmt> sl = (LinkedList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, pl, dl, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // proc_decl ::= PROC_DECL NAME LPAR param_list_comma RPAR COLON type BEGIN decl_list IN stmt_list END 
            {
              Decl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<Param> pl = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Decl> dl = (LinkedList<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Stmt> sl = (LinkedList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, pl, t, dl, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= exp log_op exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, o, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= NOT exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= exp rel_op exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, o, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= e 
            {
              Object RESULT =null;
		 RESULT = "disambiguated math"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= call_stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= NEW NAME 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new New(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= var 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= ref_var 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= deref_var 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= LPAR exp RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new NestedExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // e ::= e ADD t 
            {
              String RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String first = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String second = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // e ::= e MINUS t 
            {
              String RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String first = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String second = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // e ::= t 
            {
              String RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String first = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // t ::= t MULT f 
            {
              String RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String first = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String second = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // t ::= t DIVIDE f 
            {
              String RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String first = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String second = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // t ::= f 
            {
              String RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String first = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // f ::= g EXPONENT f 
            {
              String RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String first = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String second = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // f ::= g 
            {
              String RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String first = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // g ::= literal 
            {
              String RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal lit = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("g",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // literal ::= STRING_LITERAL 
            {
              Literal RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal("STRING_LITERAL", str.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // literal ::= INT_LITERAL 
            {
              Literal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal("INT_LITERAL", i.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // literal ::= FLOAT_LITERAL 
            {
              Literal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal("FLOAT_LITERAL", f.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // literal ::= bool 
            {
              Literal RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal("BOOL_LITERAL", b.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // literal ::= NULL 
            {
              Literal RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal("NULL_LITERAL", n.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // rel_op ::= LT 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // rel_op ::= LTEQ 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // rel_op ::= GT 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // rel_op ::= GTEQ 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // rel_op ::= EQ 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // rel_op ::= NEQ 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arit_op ::= ADD 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arit_op ::= MINUS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arit_op ::= MULT 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arit_op ::= DIVIDE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arit_op ::= EXPONENT 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bool ::= TRUE 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bool ::= FALSE 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // log_op ::= AND 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // log_op ::= OR 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // stmt ::= assign_stmt 
            {
              Stmt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt a = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // stmt ::= if_stmt 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt i = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // stmt ::= while_stmt 
            {
              Stmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt w = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // stmt ::= return_stmt 
            {
              Stmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt r = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // stmt ::= call_stmt 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assign_stmt ::= var ASSIGN_OP exp 
            {
              Stmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Assign(v.name, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // assign_stmt ::= deref_var ASSIGN_OP exp 
            {
              Stmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Assign(v.name, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // if_stmt ::= IF exp THEN stmt_list FI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Stmt> l = (LinkedList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // if_stmt ::= IF exp THEN stmt_list ELSE stmt_list FI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Stmt> l = (LinkedList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Stmt> l2 = (LinkedList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, l, l2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // while_stmt ::= WHILE exp DO stmt_list OD 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Stmt> l = (LinkedList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(e, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // return_stmt ::= RETURN exp 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Return(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // return_stmt ::= RETURN 
            {
              Stmt RESULT =null;
		 RESULT = new Return(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // call_stmt ::= NAME LPAR exp_list RPAR 
            {
              Stmt RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Object> el = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Call(name, el); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // var ::= NAME 
            {
              Var RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Var(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // var ::= exp DOT NAME 
            {
              Var RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Var(e, name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ref_var ::= REF LPAR var RPAR 
            {
              Var RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RefVar(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref_var",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // deref_var ::= DEREF LPAR var RPAR 
            {
              Var RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DerefVar(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deref_var",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // deref_var ::= DEREF LPAR deref_var RPAR 
            {
              Var RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DerefVar(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deref_var",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // type ::= FLOAT 
            {
              Type RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // type ::= INT 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // type ::= STRING 
            {
              Type RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // type ::= BOOL 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // type ::= NAME 
            {
              Type RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // type ::= REF LPAR type RPAR 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RefType(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
