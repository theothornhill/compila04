
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.FileReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.ByteArrayInputStream;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\002\007\000\002\035" +
    "\003\000\002\035\005\000\002\035\002\000\002\036\003" +
    "\000\002\036\005\000\002\036\002\000\002\040\003\000" +
    "\002\040\005\000\002\040\002\000\002\037\003\000\002" +
    "\037\005\000\002\037\002\000\002\041\003\000\002\041" +
    "\005\000\002\041\002\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\006\000\002\014\007\000" +
    "\002\015\005\000\002\013\014\000\002\013\016\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\004\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\003\000\002\025\005\000\002" +
    "\025\005\000\002\025\003\000\002\026\005\000\002\026" +
    "\003\000\002\027\003\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\003\000\002\033\005\000\002" +
    "\033\003\000\002\030\005\000\002\030\003\000\002\031" +
    "\004\000\002\031\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\024\003\000\002\024\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\004\005\000\002\004\005\000\002\005\007" +
    "\000\002\005\011\000\002\006\007\000\002\007\004\000" +
    "\002\007\003\000\002\010\006\000\002\020\003\000\002" +
    "\020\005\000\002\021\006\000\002\022\006\000\002\022" +
    "\006\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\004\004\005\001\002\000\004\002\237\001" +
    "\002\000\004\067\006\001\002\000\004\005\007\001\002" +
    "\000\014\006\ufffd\012\ufffd\016\012\017\017\020\016\001" +
    "\002\000\010\006\uffff\007\uffff\012\uffff\001\002\000\010" +
    "\006\ufff0\007\ufff0\012\ufff0\001\002\000\004\067\230\001" +
    "\002\000\006\006\227\012\050\001\002\000\010\006\uffee" +
    "\007\uffee\012\uffee\001\002\000\010\006\uffef\007\uffef\012" +
    "\uffef\001\002\000\004\067\224\001\002\000\004\067\020" +
    "\001\002\000\004\010\021\001\002\000\010\011\ufff4\013" +
    "\ufff4\067\024\001\002\000\006\011\041\013\040\001\002" +
    "\000\006\011\ufff6\013\ufff6\001\002\000\004\042\025\001" +
    "\002\000\016\032\027\063\033\064\034\065\026\066\031" +
    "\067\032\001\002\000\020\005\uffae\006\uffae\007\uffae\011" +
    "\uffae\012\uffae\013\uffae\015\uffae\001\002\000\004\010\035" +
    "\001\002\000\012\011\uffeb\012\uffeb\013\uffeb\015\uffeb\001" +
    "\002\000\020\005\uffad\006\uffad\007\uffad\011\uffad\012\uffad" +
    "\013\uffad\015\uffad\001\002\000\020\005\uffac\006\uffac\007" +
    "\uffac\011\uffac\012\uffac\013\uffac\015\uffac\001\002\000\020" +
    "\005\uffb0\006\uffb0\007\uffb0\011\uffb0\012\uffb0\013\uffb0\015" +
    "\uffb0\001\002\000\020\005\uffaf\006\uffaf\007\uffaf\011\uffaf" +
    "\012\uffaf\013\uffaf\015\uffaf\001\002\000\016\032\027\063" +
    "\033\064\034\065\026\066\031\067\032\001\002\000\004" +
    "\011\037\001\002\000\020\005\uffab\006\uffab\007\uffab\011" +
    "\uffab\012\uffab\013\uffab\015\uffab\001\002\000\004\067\024" +
    "\001\002\000\006\005\042\042\043\001\002\000\014\007" +
    "\ufffd\012\ufffd\016\012\017\017\020\016\001\002\000\016" +
    "\032\027\063\033\064\034\065\026\066\031\067\032\001" +
    "\002\000\004\005\045\001\002\000\014\007\ufffd\012\ufffd" +
    "\016\012\017\017\020\016\001\002\000\006\007\047\012" +
    "\050\001\002\000\040\006\ufffa\010\112\012\ufffa\021\100" +
    "\022\063\026\054\031\056\032\064\033\074\034\067\036" +
    "\105\037\061\040\075\044\055\067\057\001\002\000\010" +
    "\016\012\017\017\020\016\001\002\000\010\006\ufffe\007" +
    "\ufffe\012\ufffe\001\002\000\014\006\uffc0\012\uffc0\023\uffc0" +
    "\025\uffc0\030\uffc0\001\002\000\032\006\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\023\uffe6\024\uffe6\025\uffe6\027\uffe6\030\uffe6" +
    "\041\uffe6\054\213\055\214\001\002\000\026\010\112\021" +
    "\100\032\064\033\074\034\067\036\105\037\061\040\075" +
    "\044\055\067\057\001\002\000\010\037\061\040\075\044" +
    "\055\001\002\000\040\006\uffb7\010\112\012\uffb7\021\100" +
    "\023\uffb7\025\uffb7\030\uffb7\032\064\033\074\034\067\036" +
    "\105\037\061\040\075\044\055\067\057\001\002\000\032" +
    "\006\uffb5\010\177\011\uffb5\012\uffb5\013\uffb5\023\uffb5\024" +
    "\uffb5\025\uffb5\027\uffb5\030\uffb5\041\uffb5\043\uffb5\001\002" +
    "\000\042\006\uffe7\011\uffe7\012\uffe7\013\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\027\uffe7\030\uffe7\041\uffe7\046\164\047\170" +
    "\050\165\051\166\052\163\053\167\001\002\000\032\006" +
    "\uffc4\011\uffc4\012\uffc4\013\uffc4\023\uffc4\024\uffc4\025\uffc4" +
    "\027\uffc4\030\uffc4\041\uffc4\061\uffc4\062\uffc4\001\002\000" +
    "\004\041\120\001\002\000\026\010\112\021\100\032\064" +
    "\033\074\034\067\036\105\037\061\040\075\044\055\067" +
    "\057\001\002\000\004\010\151\001\002\000\026\006\uffe2" +
    "\011\uffe2\012\uffe2\013\uffe2\023\uffe2\024\uffe2\025\uffe2\027" +
    "\uffe2\030\uffe2\041\uffe2\001\002\000\006\006\147\012\146" +
    "\001\002\000\040\006\uffd7\011\uffd7\012\uffd7\013\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\027\uffd7\030\uffd7\041\uffd7\054\uffd7" +
    "\055\uffd7\056\uffd7\057\uffd7\060\uffd7\001\002\000\006\041" +
    "\uffe1\043\144\001\002\000\032\006\uffca\011\uffca\012\uffca" +
    "\013\uffca\023\uffca\024\uffca\025\uffca\027\uffca\030\uffca\041" +
    "\uffca\061\uffca\062\uffca\001\002\000\036\006\uffdd\011\uffdd" +
    "\012\uffdd\013\uffdd\023\uffdd\024\uffdd\025\uffdd\027\uffdd\030" +
    "\uffdd\041\uffdd\054\uffdd\055\uffdd\056\140\057\141\001\002" +
    "\000\014\006\uffbf\012\uffbf\023\uffbf\025\uffbf\030\uffbf\001" +
    "\002\000\004\010\133\001\002\000\032\006\uffc3\011\uffc3" +
    "\012\uffc3\013\uffc3\023\uffc3\024\uffc3\025\uffc3\027\uffc3\030" +
    "\uffc3\041\uffc3\061\uffc3\062\uffc3\001\002\000\032\006\uffcc" +
    "\011\uffcc\012\uffcc\013\uffcc\023\uffcc\024\uffcc\025\uffcc\027" +
    "\uffcc\030\uffcc\041\uffcc\061\uffcc\062\uffcc\001\002\000\014" +
    "\006\uffc1\012\uffc1\023\uffc1\025\uffc1\030\uffc1\001\002\000" +
    "\004\067\132\001\002\000\032\006\uffce\011\uffce\012\uffce" +
    "\013\uffce\023\uffce\024\uffce\025\uffce\027\uffce\030\uffce\041" +
    "\uffce\061\130\062\uffce\001\002\000\030\006\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\023\uffe8\024\uffe8\025\uffe8\027\uffe8\030" +
    "\uffe8\041\uffe8\062\126\001\002\000\040\006\uffd8\011\uffd8" +
    "\012\uffd8\013\uffd8\023\uffd8\024\uffd8\025\uffd8\027\uffd8\030" +
    "\uffd8\041\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\124" +
    "\001\002\000\036\006\uffda\011\uffda\012\uffda\013\uffda\023" +
    "\uffda\024\uffda\025\uffda\027\uffda\030\uffda\041\uffda\054\uffda" +
    "\055\uffda\056\uffda\057\uffda\001\002\000\042\006\uffd0\011" +
    "\uffd0\012\uffd0\013\uffd0\023\uffd0\024\uffd0\025\uffd0\027\uffd0" +
    "\030\uffd0\041\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052" +
    "\uffd0\053\uffd0\001\002\000\006\041\uffe3\043\122\001\002" +
    "\000\016\006\uffbe\012\uffbe\023\uffbe\025\uffbe\030\uffbe\041" +
    "\uffe5\001\002\000\014\006\uffc2\012\uffc2\023\uffc2\025\uffc2" +
    "\030\uffc2\001\002\000\014\006\ufffc\012\ufffc\023\ufffc\025" +
    "\ufffc\030\ufffc\001\002\000\026\010\112\021\100\032\064" +
    "\033\074\034\067\036\105\037\061\040\075\044\055\067" +
    "\057\001\002\000\006\011\117\041\120\001\002\000\026" +
    "\006\uffe1\011\uffe1\012\uffe1\013\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\027\uffe1\030\uffe1\041\uffe1\001\002\000\026\006\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\023\uffe3\024\uffe3\025\uffe3\027" +
    "\uffe3\030\uffe3\041\uffe3\001\002\000\026\006\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\023\uffe5\024\uffe5\025\uffe5\027\uffe5\030" +
    "\uffe5\041\uffe5\001\002\000\026\006\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\023\uffe0\024\uffe0\025\uffe0\027\uffe0\030\uffe0\041" +
    "\uffe0\001\002\000\004\067\121\001\002\000\030\006\uffb4" +
    "\011\uffb4\012\uffb4\013\uffb4\023\uffb4\024\uffb4\025\uffb4\027" +
    "\uffb4\030\uffb4\041\uffb4\043\uffb4\001\002\000\026\010\112" +
    "\021\100\032\064\033\074\034\067\036\105\037\061\040" +
    "\075\044\055\067\057\001\002\000\016\006\uffbd\012\uffbd" +
    "\023\uffbd\025\uffbd\030\uffbd\041\120\001\002\000\004\034" +
    "\067\001\002\000\036\006\uffd9\011\uffd9\012\uffd9\013\uffd9" +
    "\023\uffd9\024\uffd9\025\uffd9\027\uffd9\030\uffd9\041\uffd9\054" +
    "\uffd9\055\uffd9\056\uffd9\057\uffd9\001\002\000\010\037\061" +
    "\040\075\044\055\001\002\000\032\006\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\023\uffcf\024\uffcf\025\uffcf\027\uffcf\030\uffcf" +
    "\041\uffcf\061\130\062\uffcf\001\002\000\010\037\061\040" +
    "\075\044\055\001\002\000\032\006\uffcd\011\uffcd\012\uffcd" +
    "\013\uffcd\023\uffcd\024\uffcd\025\uffcd\027\uffcd\030\uffcd\041" +
    "\uffcd\061\uffcd\062\uffcd\001\002\000\026\006\uffe4\011\uffe4" +
    "\012\uffe4\013\uffe4\023\uffe4\024\uffe4\025\uffe4\027\uffe4\030" +
    "\uffe4\041\uffe4\001\002\000\026\010\112\021\100\032\064" +
    "\033\074\034\067\036\105\037\061\040\075\044\055\067" +
    "\057\001\002\000\006\011\137\041\uffe1\001\002\000\006" +
    "\011\136\041\uffe3\001\002\000\030\006\uffb2\011\uffb2\012" +
    "\uffb2\013\uffb2\023\uffb2\024\uffb2\025\uffb2\027\uffb2\030\uffb2" +
    "\041\uffb2\043\uffb2\001\002\000\030\006\uffb1\011\uffb1\012" +
    "\uffb1\013\uffb1\023\uffb1\024\uffb1\025\uffb1\027\uffb1\030\uffb1" +
    "\041\uffb1\043\uffb1\001\002\000\004\034\067\001\002\000" +
    "\004\034\067\001\002\000\036\006\uffdb\011\uffdb\012\uffdb" +
    "\013\uffdb\023\uffdb\024\uffdb\025\uffdb\027\uffdb\030\uffdb\041" +
    "\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\001\002\000\036" +
    "\006\uffdc\011\uffdc\012\uffdc\013\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\027\uffdc\030\uffdc\041\uffdc\054\uffdc\055\uffdc\056\uffdc" +
    "\057\uffdc\001\002\000\026\010\112\021\100\032\064\033" +
    "\074\034\067\036\105\037\061\040\075\044\055\067\057" +
    "\001\002\000\016\006\uffbc\012\uffbc\023\uffbc\025\uffbc\030" +
    "\uffbc\041\120\001\002\000\034\010\112\021\100\022\063" +
    "\026\054\031\056\032\064\033\074\034\067\036\105\037" +
    "\061\040\075\044\055\067\057\001\002\000\010\006\uffe9" +
    "\007\uffe9\012\uffe9\001\002\000\014\006\ufffb\012\ufffb\023" +
    "\ufffb\025\ufffb\030\ufffb\001\002\000\026\010\112\021\100" +
    "\032\064\033\074\034\067\036\105\037\061\040\075\044" +
    "\055\067\057\001\002\000\006\011\153\041\uffe3\001\002" +
    "\000\026\006\uffb3\011\uffb3\012\uffb3\013\uffb3\023\uffb3\024" +
    "\uffb3\025\uffb3\027\uffb3\030\uffb3\041\uffb3\001\002\000\006" +
    "\024\155\041\120\001\002\000\042\010\112\012\ufffa\021" +
    "\100\022\063\023\ufffa\025\ufffa\026\054\031\056\032\064" +
    "\033\074\034\067\036\105\037\061\040\075\044\055\067" +
    "\057\001\002\000\010\012\146\023\157\025\160\001\002" +
    "\000\014\006\uffbb\012\uffbb\023\uffbb\025\uffbb\030\uffbb\001" +
    "\002\000\040\010\112\012\ufffa\021\100\022\063\023\ufffa" +
    "\026\054\031\056\032\064\033\074\034\067\036\105\037" +
    "\061\040\075\044\055\067\057\001\002\000\006\012\146" +
    "\023\162\001\002\000\014\006\uffba\012\uffba\023\uffba\025" +
    "\uffba\030\uffba\001\002\000\004\036\176\001\002\000\004" +
    "\036\175\001\002\000\004\036\174\001\002\000\004\036" +
    "\173\001\002\000\004\036\172\001\002\000\004\036\171" +
    "\001\002\000\042\006\uffd5\011\uffd5\012\uffd5\013\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\027\uffd5\030\uffd5\041\uffd5\046\uffd5" +
    "\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\001\002\000" +
    "\042\006\uffd1\011\uffd1\012\uffd1\013\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\027\uffd1\030\uffd1\041\uffd1\046\uffd1\047\uffd1\050" +
    "\uffd1\051\uffd1\052\uffd1\053\uffd1\001\002\000\042\006\uffd3" +
    "\011\uffd3\012\uffd3\013\uffd3\023\uffd3\024\uffd3\025\uffd3\027" +
    "\uffd3\030\uffd3\041\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\001\002\000\042\006\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\023\uffd4\024\uffd4\025\uffd4\027\uffd4\030\uffd4" +
    "\041\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053" +
    "\uffd4\001\002\000\042\006\uffd6\011\uffd6\012\uffd6\013\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\027\uffd6\030\uffd6\041\uffd6\046" +
    "\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\001\002" +
    "\000\042\006\uffd2\011\uffd2\012\uffd2\013\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\027\uffd2\030\uffd2\041\uffd2\046\uffd2\047\uffd2" +
    "\050\uffd2\051\uffd2\052\uffd2\053\uffd2\001\002\000\032\010" +
    "\112\011\ufff1\013\ufff1\021\100\032\064\033\074\034\067" +
    "\036\105\037\061\040\075\044\055\067\057\001\002\000" +
    "\010\011\ufff3\013\ufff3\041\120\001\002\000\006\011\203" +
    "\013\202\001\002\000\026\010\112\021\100\032\064\033" +
    "\074\034\067\036\105\037\061\040\075\044\055\067\057" +
    "\001\002\000\026\006\uffb6\011\uffb6\012\uffb6\013\uffb6\023" +
    "\uffb6\024\uffb6\025\uffb6\027\uffb6\030\uffb6\041\uffb6\001\002" +
    "\000\010\011\ufff2\013\ufff2\041\120\001\002\000\016\006" +
    "\uffb8\012\uffb8\023\uffb8\025\uffb8\030\uffb8\041\120\001\002" +
    "\000\032\006\uffcb\011\uffcb\012\uffcb\013\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\027\uffcb\030\uffcb\041\uffcb\061\uffcb\062\uffcb" +
    "\001\002\000\006\027\210\041\120\001\002\000\040\010" +
    "\112\012\ufffa\021\100\022\063\026\054\030\ufffa\031\056" +
    "\032\064\033\074\034\067\036\105\037\061\040\075\044" +
    "\055\067\057\001\002\000\006\012\146\030\212\001\002" +
    "\000\014\006\uffb9\012\uffb9\023\uffb9\025\uffb9\030\uffb9\001" +
    "\002\000\004\034\067\001\002\000\004\034\067\001\002" +
    "\000\036\006\uffde\011\uffde\012\uffde\013\uffde\023\uffde\024" +
    "\uffde\025\uffde\027\uffde\030\uffde\041\uffde\054\uffde\055\uffde" +
    "\056\140\057\141\001\002\000\036\006\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\023\uffdf\024\uffdf\025\uffdf\027\uffdf\030\uffdf" +
    "\041\uffdf\054\uffdf\055\uffdf\056\140\057\141\001\002\000" +
    "\006\007\220\012\050\001\002\000\040\006\ufffa\010\112" +
    "\012\ufffa\021\100\022\063\026\054\031\056\032\064\033" +
    "\074\034\067\036\105\037\061\040\075\044\055\067\057" +
    "\001\002\000\006\006\222\012\146\001\002\000\010\006" +
    "\uffea\007\uffea\012\uffea\001\002\000\006\011\ufff5\013\ufff5" +
    "\001\002\000\004\042\225\001\002\000\016\032\027\063" +
    "\033\064\034\065\026\066\031\067\032\001\002\000\010" +
    "\006\uffed\007\uffed\012\uffed\001\002\000\004\002\000\001" +
    "\002\000\004\014\231\001\002\000\010\012\ufff7\015\ufff7" +
    "\067\024\001\002\000\006\012\234\015\235\001\002\000" +
    "\006\012\ufff9\015\ufff9\001\002\000\004\067\024\001\002" +
    "\000\010\006\uffec\007\uffec\012\uffec\001\002\000\006\012" +
    "\ufff8\015\ufff8\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\011\007\012\013" +
    "\013\014\014\010\035\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\022\037\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\222\001" +
    "\001\000\002\001\001\000\014\011\007\012\013\013\014" +
    "\014\010\035\216\001\001\000\004\017\043\001\001\000" +
    "\002\001\001\000\014\011\007\012\013\013\014\014\010" +
    "\035\045\001\001\000\002\001\001\000\052\003\110\004" +
    "\107\005\076\006\051\007\072\010\106\016\061\020\105" +
    "\021\064\022\067\024\070\025\071\026\103\027\102\030" +
    "\100\031\075\032\052\033\101\034\057\036\065\001\001" +
    "\000\012\011\050\012\013\013\014\014\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\010\115\016\206\020\114\021\064\022\113\024\070\025" +
    "\071\026\103\027\102\030\100\031\075\032\052\033\101" +
    "\034\057\001\001\000\006\024\070\031\205\001\001\000" +
    "\036\010\115\016\204\020\114\021\064\022\113\024\070" +
    "\025\071\026\103\027\102\030\100\031\075\032\052\033" +
    "\101\034\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\010\115\016" +
    "\153\020\114\021\064\022\113\024\070\025\071\026\103" +
    "\027\102\030\100\031\075\032\052\033\101\034\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\010\115\016\112\020\114\021\064\022\113\024\070\025" +
    "\071\026\103\027\102\030\100\031\075\032\052\033\101" +
    "\034\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\010\115\016\122\020" +
    "\114\021\064\022\113\024\070\025\071\026\103\027\102" +
    "\030\100\031\075\032\052\033\101\034\057\001\001\000" +
    "\002\001\001\000\006\026\124\027\102\001\001\000\002" +
    "\001\001\000\010\024\070\030\126\031\075\001\001\000" +
    "\002\001\001\000\006\024\070\031\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\010\115\016\061\020" +
    "\134\021\064\022\133\024\070\025\071\026\103\027\102" +
    "\030\100\031\075\032\052\033\101\034\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\142\027\102\001\001\000\006\026" +
    "\141\027\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\010\115\016\144\020\114\021\064\022\113\024" +
    "\070\025\071\026\103\027\102\030\100\031\075\032\052" +
    "\033\101\034\057\001\001\000\002\001\001\000\050\003" +
    "\147\004\107\005\076\006\051\007\072\010\106\016\061" +
    "\020\105\021\064\022\067\024\070\025\071\026\103\027" +
    "\102\030\100\031\075\032\052\033\101\034\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\010\115\016" +
    "\061\020\151\021\064\022\113\024\070\025\071\026\103" +
    "\027\102\030\100\031\075\032\052\033\101\034\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\003\110\004\107\005\076\006\051\007\072\010" +
    "\106\016\061\020\105\021\064\022\067\024\070\025\071" +
    "\026\103\027\102\030\100\031\075\032\052\033\101\034" +
    "\057\036\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\003\110\004\107\005\076\006\051\007\072\010" +
    "\106\016\061\020\105\021\064\022\067\024\070\025\071" +
    "\026\103\027\102\030\100\031\075\032\052\033\101\034" +
    "\057\036\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\010\115" +
    "\016\177\020\114\021\064\022\113\024\070\025\071\026" +
    "\103\027\102\030\100\031\075\032\052\033\101\034\057" +
    "\041\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\010\115\016\203\020\114\021\064\022\113\024\070" +
    "\025\071\026\103\027\102\030\100\031\075\032\052\033" +
    "\101\034\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\110\004\107\005\076\006\051\007\072\010\106" +
    "\016\061\020\105\021\064\022\067\024\070\025\071\026" +
    "\103\027\102\030\100\031\075\032\052\033\101\034\057" +
    "\036\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\025\215\026\103\027\102\001\001\000\010\025\214" +
    "\026\103\027\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\003\110\004\107\005\076" +
    "\006\051\007\072\010\106\016\061\020\105\021\064\022" +
    "\067\024\070\025\071\026\103\027\102\030\100\031\075" +
    "\032\052\033\101\034\057\036\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\225\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\232\040\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


public void syntax_error(Symbol s) {
    System.err.printf("Syntax error on: [line: %s, column: %s, value: %s]\n",
                                s.left + 1, s.right + 1, s.value);
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= PROGRAM NAME BEGIN decl_list END 
            {
              Program RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Decl> dl = (LinkedList<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Program(name, dl);
                                  System.out.println(RESULT.printAst()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decl_list ::= decl 
            {
              LinkedList<Decl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Decl> l = new LinkedList<Decl>();
                                l.add(d);
                                RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_list ::= decl_list SEMI decl 
            {
              LinkedList<Decl> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Decl> dl = (LinkedList<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 dl.add(d); RESULT = dl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl_list ::= 
            {
              LinkedList<Decl> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt_list ::= stmt 
            {
              LinkedList<Stmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Stmt> l = new LinkedList<>();
                                 l.add(s);
                                 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt_list ::= stmt_list SEMI stmt 
            {
              LinkedList<Stmt> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Stmt> sl = (LinkedList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 sl.add(s); RESULT = sl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt_list ::= 
            {
              LinkedList<Stmt> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // param_list_semi ::= paramfield_decl 
            {
              LinkedList<Param> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Param> l = new LinkedList<>();
                                           l.add(p);
                                           RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list_semi",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // param_list_semi ::= param_list_semi SEMI paramfield_decl 
            {
              LinkedList<Param> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Param> pl = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pl.add(p); RESULT = pl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list_semi",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // param_list_semi ::= 
            {
              LinkedList<Param> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list_semi",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // param_list_comma ::= paramfield_decl 
            {
              LinkedList<Param> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Param> l = new LinkedList<>();
                                           l.add(p);
                                           RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list_comma",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // param_list_comma ::= param_list_comma COMMA paramfield_decl 
            {
              LinkedList<Param> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Param> pl = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pl.add(p); RESULT = pl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list_comma",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // param_list_comma ::= 
            {
              LinkedList<Param> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list_comma",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp_list ::= exp 
            {
              LinkedList<Object> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Object> l = new LinkedList<>();
                                          l.add(e);
                                          RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp_list ::= exp_list COMMA exp 
            {
              LinkedList<Object> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Object> el = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 el.add(e); RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp_list ::= 
            {
              LinkedList<Object> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // decl ::= rec_decl 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decl ::= proc_decl 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // decl ::= var_decl 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_decl ::= VAR_DECL NAME COLON type 
            {
              Decl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDecl(name, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // rec_decl ::= REC_DECL NAME LCURLY param_list_semi RCURLY 
            {
              Decl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Param> pl = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RecDecl(name, pl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rec_decl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // paramfield_decl ::= NAME COLON type 
            {
              Param RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(name, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramfield_decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // proc_decl ::= PROC_DECL NAME LPAR param_list_comma RPAR BEGIN decl_list IN stmt_list END 
            {
              Decl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Param> pl = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Decl> dl = (LinkedList<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Stmt> sl = (LinkedList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, pl, dl, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // proc_decl ::= PROC_DECL NAME LPAR param_list_comma RPAR COLON type BEGIN decl_list IN stmt_list END 
            {
              Decl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<Param> pl = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Decl> dl = (LinkedList<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Stmt> sl = (LinkedList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, pl, t, dl, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= logic 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= relation 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= math 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= call_stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= NEW NAME 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new New(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= var 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= ref_var 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= deref_var 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= LPAR exp RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new NestedExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // math ::= math ADD t 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object second = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(first, o, second); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // math ::= math MINUS t 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object second = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(first, o, second); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // math ::= t 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = first; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // t ::= t MULT f 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object second = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(first, o, second); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // t ::= t DIVIDE f 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object second = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(first, o, second); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // t ::= f 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = first; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // f ::= g EXPONENT f 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object second = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(first, o, second); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // f ::= g 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = first; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // g ::= INT_LITERAL 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lit = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("g",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // relation ::= relation LT FLOAT_LITERAL 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String second = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(first, o, second); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relation ::= relation LTEQ FLOAT_LITERAL 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String second = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(first, o, second); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relation ::= relation GT FLOAT_LITERAL 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String second = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(first, o, second); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relation ::= relation GTEQ FLOAT_LITERAL 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String second = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(first, o, second); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // relation ::= relation EQ FLOAT_LITERAL 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String second = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(first, o, second); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // relation ::= relation NEQ FLOAT_LITERAL 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String second = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(first, o, second); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // relation ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // logic ::= logic OR h 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object second = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(first, o, second); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // logic ::= h 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = first; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // h ::= h AND i 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object second = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(first, o, second); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // h ::= i 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = first; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // i ::= NOT i 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(first); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // i ::= bool 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // literal ::= STRING_LITERAL 
            {
              Literal RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal("STRING_LITERAL", str.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // literal ::= INT_LITERAL 
            {
              Literal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal("INT_LITERAL", i.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // literal ::= FLOAT_LITERAL 
            {
              Literal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal("FLOAT_LITERAL", f.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // literal ::= bool 
            {
              Literal RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal("BOOL_LITERAL", b.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // literal ::= NULL 
            {
              Literal RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal("NULL_LITERAL", n.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bool ::= TRUE 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bool ::= FALSE 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // stmt ::= assign_stmt 
            {
              Stmt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt a = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // stmt ::= if_stmt 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt i = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // stmt ::= while_stmt 
            {
              Stmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt w = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // stmt ::= return_stmt 
            {
              Stmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt r = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // stmt ::= call_stmt 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // assign_stmt ::= var ASSIGN_OP exp 
            {
              Stmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Assign(v.name, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assign_stmt ::= deref_var ASSIGN_OP exp 
            {
              Stmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Assign(v.name, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // if_stmt ::= IF exp THEN stmt_list FI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Stmt> l = (LinkedList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // if_stmt ::= IF exp THEN stmt_list ELSE stmt_list FI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Stmt> l = (LinkedList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Stmt> l2 = (LinkedList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(e, l, l2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // while_stmt ::= WHILE exp DO stmt_list OD 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Stmt> l = (LinkedList<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(e, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // return_stmt ::= RETURN exp 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Return(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // return_stmt ::= RETURN 
            {
              Stmt RESULT =null;
		 RESULT = new Return(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // call_stmt ::= NAME LPAR exp_list RPAR 
            {
              Stmt RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Object> el = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Call(name, el); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // var ::= NAME 
            {
              Var RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Var(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // var ::= exp DOT NAME 
            {
              Var RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Var(e, name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ref_var ::= REF LPAR var RPAR 
            {
              Var RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RefVar(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref_var",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // deref_var ::= DEREF LPAR var RPAR 
            {
              Var RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DerefVar(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deref_var",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // deref_var ::= DEREF LPAR deref_var RPAR 
            {
              Var RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DerefVar(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deref_var",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // type ::= FLOAT 
            {
              Type RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // type ::= INT 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // type ::= STRING 
            {
              Type RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // type ::= BOOL 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // type ::= NAME 
            {
              Type RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // type ::= REF LPAR type RPAR 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RefType(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
