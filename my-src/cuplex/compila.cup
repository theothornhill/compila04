import java_cup.runtime.*;
import java.io.FileReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.ByteArrayInputStream;
import java.util.*;

parser code
{:
public void syntax_error(Symbol s) {
    System.err.printf("Syntax error on: [line: %s, column: %s, value: %s]\n",
                                s.left + 1, s.right + 1, s.value);
}
:};

scan with {: return getScanner().next_token(); :};

terminal                           PROGRAM;
terminal                           BEGIN, END, IN;
terminal                           LPAR, RPAR, SEMI, COMMA, LCURLY, RCURLY;
terminal                           REC_DECL, PROC_DECL, VAR_DECL, NEW;
terminal                           IF, FI, THEN, ELSE, WHILE, DO, OD, RETURN, REF, DEREF;
terminal String                    INT_LITERAL, STRING_LITERAL, FLOAT_LITERAL;
terminal String                    TRUE, FALSE;
terminal                           DOT, PARAM_ID, ASSIGN_OP;
terminal                           NOT, NULL;
terminal String                    LT, LTEQ, GT, GTEQ, EQ, NEQ;
terminal String                    ADD, MINUS, MULT, DIVIDE, EXPONENT;
terminal String                    AND, OR;
terminal String                    FLOAT, INT, STRING;
terminal String                    NAME;
nonterminal Program                program;
nonterminal Stmt                   stmt, assign_stmt, if_stmt, while_stmt;
nonterminal Stmt                   return_stmt, call_stmt;
nonterminal Decl                   decl, var_decl, proc_decl, rec_decl;
nonterminal Param                  paramfield_decl;
nonterminal                        exp;
nonterminal Object                 rel_op, log_op, arit_op, type;
nonterminal String                 bool, var, ref_var, deref_var;
nonterminal String                 literal;
nonterminal LinkedList<Decl>       decl_list;
nonterminal LinkedList<Stmt>       stmt_list;
nonterminal LinkedList<Param>      param_list_comma, param_list_semi;
nonterminal LinkedList<Object>     exp_list;

precedence left                    OR;
precedence left                    AND;
precedence right                   NOT;
precedence nonassoc                LT, LTEQ, GT, GTEQ, EQ, NEQ;
precedence left                    ADD, MINUS;
precedence left                    MULT, DIVIDE;
precedence right                   EXPONENT, LPAR;
precedence left                    DOT;

start with program;

program           ::= PROGRAM NAME:name BEGIN decl_list:dl END
                               {: RESULT = new Program(name, dl);
                                  System.out.println(RESULT.printAst()); :}
                    ;

decl_list         ::= decl:d {: LinkedList<Decl> l = new LinkedList<Decl>();
                                l.add(d);
                                RESULT = l; :}
                    | decl_list:dl SEMI decl:d {: dl.add(d); RESULT = dl; :}
                    | 
                    ;

stmt_list          ::= stmt:s {: LinkedList<Stmt> l = new LinkedList<>();
                                 l.add(s);
                                 RESULT = l; :}
                    | stmt_list:sl SEMI stmt:s {: sl.add(s); RESULT = sl; :}
                    |
                    ;

param_list_semi   ::= paramfield_decl:p {: LinkedList<Param> l = new LinkedList<>();
                                           l.add(p);
                                           RESULT = l; :}
                    | param_list_semi:pl SEMI paramfield_decl:p
                                         {: pl.add(p); RESULT = pl; :}
                    |
                    ;
param_list_comma  ::= paramfield_decl:p {: LinkedList<Param> l = new LinkedList<>();
                                           l.add(p);
                                           RESULT = l; :}
                    | param_list_comma:pl COMMA paramfield_decl:p
                                          {: pl.add(p); RESULT = pl; :}
                    |
                    ;
                    
exp_list          ::= exp:e {: LinkedList<Object> l = new LinkedList<>();
                                          l.add(e);
                                          RESULT = l; :}
                    | exp_list:el COMMA exp:e {: el.add(e); RESULT = el; :}
                    |
                    ;

decl              ::= rec_decl:d {: RESULT = d; :}
                    | proc_decl:d {: RESULT = d; :}
                    | var_decl:d {: RESULT = d; :}
                    ;

var_decl          ::= VAR_DECL NAME:name PARAM_ID type:t
                      {: RESULT = new VarDecl(name, t); :}
                    ;

rec_decl          ::= REC_DECL NAME:name LCURLY param_list_semi:pl RCURLY
                               {: RESULT = new RecDecl(name, pl); :}
                    ;

paramfield_decl   ::= NAME:name PARAM_ID type:t {: RESULT = new Param(name, t); :}
                    ;

proc_decl         ::= PROC_DECL NAME:name
                                LPAR param_list_comma:pl RPAR
                                BEGIN decl_list:dl
                                IN stmt_list:sl END
                                {: RESULT = new ProcDecl(name, pl, dl, sl); :}
                    | PROC_DECL NAME:name
                                LPAR param_list_comma:pl RPAR
                                PARAM_ID type:t
                                BEGIN decl_list:dl
                                IN stmt_list:sl END
                                {: RESULT = new ProcDecl(name, pl, t, dl, sl); :}
                    ;

/* Expressions needs work. Check that we're not missing rules*/
exp               ::= exp:e1 log_op:o exp:e2  {: RESULT = new LogicExpr(e1, e2, o); :}
                    | NOT exp:e               {: RESULT = new Expr(e.toString()); :}
                    | exp:e1 rel_op:o exp:e2  {: RESULT = new RelExpr(e1, e2, o); :}
                    | exp:e1 arit_op:o exp:e2 {: RESULT = new AritExpr(e1, e2, o); :}
                    | literal:lit             {: RESULT = lit; :}
                    | call_stmt:s             {: RESULT = s; :}
                    | NEW NAME:name           {: RESULT = new Expr(name); :}
                    | var:v                   {: RESULT = v; :}
                    | ref_var:v               {: RESULT = v; :}
                    | deref_var:v             {: RESULT = v; :}
                    | LPAR exp:e RPAR         {: RESULT = new Expr(e.toString()); :}
                    ;

literal           ::= STRING_LITERAL:str {: RESULT = str; :}
                    | INT_LITERAL:i {: RESULT = i; :}
                    | FLOAT_LITERAL:f {: RESULT = f; :}
                    | bool:b {: RESULT = b; :}
                    | NULL {: RESULT = "null"; :}
                    ;

rel_op            ::= LT:o      {: RESULT = o; :}
                    | LTEQ:o    {: RESULT = o; :}
                    | GT:o      {: RESULT = o; :}
                    | GTEQ:o    {: RESULT = o; :}
                    | EQ:o      {: RESULT = o; :}
                    | NEQ:o     {: RESULT = o; :}
                    ;

arit_op           ::= ADD:o       {: RESULT = o; :}
                    | MINUS:o     {: RESULT = o; :}
                    | MULT:o      {: RESULT = o; :}
                    | DIVIDE:o    {: RESULT = o; :}
                    | EXPONENT:o  {: RESULT = o; :}
                    ;

bool              ::= TRUE:o      {: RESULT = o; :}
                    | FALSE:o     {: RESULT = o; :}
                    ;

log_op            ::= AND:o       {: RESULT = o; :}
                    | OR:o        {: RESULT = o; :}
                    ;


/* Statements - need to be adjusted to allow for optional value */

stmt              ::= assign_stmt:a {: RESULT = a; :}
                    | if_stmt:i     {: RESULT = i; :}
                    | while_stmt:w  {: RESULT = w; :}
                    | return_stmt:r {: RESULT = r; :}
                    | call_stmt:s   {: RESULT = s; :}
                    ;

assign_stmt       ::= var:v ASSIGN_OP exp:e
                            {: RESULT = new Assign(v+" " + e ); :}
                    | deref_var:v ASSIGN_OP exp:e
                            {: RESULT = new Assign(v+" " + e); :}     
                    ;

if_stmt           ::= IF exp:e THEN stmt_list:l FI
                                           {: RESULT = new If(e, l); :}
                    | IF exp:e THEN stmt_list:l ELSE stmt_list:l2 FI
                                           {: RESULT = new If(e, l, l2); :}
                    ;

while_stmt        ::= WHILE exp:e DO stmt_list:l OD
                            {: RESULT = new While(e, l); :}
                    ;

return_stmt       ::= RETURN exp:e {: RESULT = new Return(e.toString()); :}
                    | RETURN {: RESULT = new Return(""); :}
                    ;

call_stmt         ::= NAME:name LPAR exp_list:el RPAR
                                {: RESULT = new Call(name, el); :}
                    ;

/* Vars, refs and derefs */

var               ::= NAME:name                     {: RESULT = name; :}
                    | exp:e DOT NAME:name           {: RESULT = name; :}
                    ;

ref_var           ::= REF LPAR var:v RPAR           {: RESULT = "ref " + v; :}
                    ;

deref_var         ::= DEREF LPAR var:v RPAR         {: RESULT = "deref " +  v; :}
                    | DEREF LPAR deref_var:v RPAR   {: RESULT = "deref " +  v; :}
                    ;

type              ::= FLOAT:f {: RESULT = f; :}
                    | INT:i {: RESULT = i; :}
                    | STRING:s {: RESULT = s; :}
                    | bool:b {: RESULT = b; :}
                    | NAME:n {: RESULT = n; :}
                    | REF LPAR type:t RPAR {: RESULT = t; :}
                    ;
