import java_cup.runtime.*;
import java.io.FileReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.ByteArrayInputStream;
import java.util.*;

parser code
{:
public void syntax_error(Symbol s){
    System.err.printf("compiler has detected a syntax error: [%s]\n", s.value);
}
:};

scan with {: return getScanner().next_token(); :};

terminal                           PROGRAM;
terminal                           BEGIN, END;
terminal                           LPAR, RPAR;
terminal                           REC_DECL, PROC_DECL, VAR_DECL, NEW;
terminal                           IF, FI, WHILE, RETURN, REF, DEREF;
terminal                           INT_LITERAL, STRING_LITERAL, FLOAT_LITERAL;
terminal                           COMMENT;
terminal                           RELOP, ARIT, LOGIC, DOT, PARAM_ID;
terminal String                    NAME;
nonterminal Program                program;
nonterminal String                 rec_decl, var_decl, proc_decl;
nonterminal                        decl;
nonterminal LinkedList<String>     decl_list;


program           ::=  PROGRAM NAME:name BEGIN decl_list:decl END
                               {: RESULT = new Program(name, decl);
                                  System.out.println(RESULT.printAst()); :}
                   ;
/* Not correct rules here, but this is better*/
decl_list         ::= rec_decl:d {: LinkedList<String> l = new LinkedList<String>();
                                       l.add(d); RESULT = l; :}
                    | decl_list:dl rec_decl:d {: LinkedList<String> l = new
                                       LinkedList<String>();
                                       dl.add(d); RESULT = dl; :}
                    | decl_list:dl var_decl:d {: LinkedList<String> l = new
                                       LinkedList<String>();
                                       dl.add(d); RESULT = dl; :}
                    | decl_list:dl proc_decl:d {: LinkedList<String> l = new
                                       LinkedList<String>();
                                       dl.add(d); RESULT = dl; :}
                    ;
                    
rec_decl          ::= REC_DECL NAME:name
                          {: RESULT = "(RECORD " + name + ")"; :}
                    ;
                    
var_decl          ::= VAR_DECL NAME:name PARAM_ID NAME:type RELOP STRING_LITERAL:content
                          {: RESULT = "(VAR " + name + " (TYPE " + type + " (" +
                             content + ")" +")"; :}
                    ;

proc_decl         ::= PROC_DECL NAME:name LPAR decl_list:dl RPAR BEGIN decl_list:body END
                          {: LinkedList<String> l = new LinkedList<String>();
                                RESULT = "(PROCEDURE " + name + " (ARGS " +
                                dl.get(0) + "\n\t\t("; :}
                    ;
