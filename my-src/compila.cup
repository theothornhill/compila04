import java_cup.runtime.*;
import java.io.FileReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.ByteArrayInputStream;
import java.util.*;

parser code
{:
public void syntax_error(Symbol s){
    System.err.printf("compiler has detected a syntax error: [%s]\n", s.value);
}
:};

scan with {: return getScanner().next_token(); :};

terminal                           PROGRAM;
terminal                           BEGIN, END;
terminal                           LPAR, RPAR;
terminal                           REC_DECL, PROC_DECL, VAR_DECL, NEW;
terminal                           IF, FI, WHILE, RETURN, REF, DEREF;
terminal                           INT_LITERAL, STRING_LITERAL, FLOAT_LITERAL;
terminal                           COMMENT;
terminal                           DOT, PARAM_ID;
terminal                           LT, LTEQ, GT, GTEQ, EQ, NEQ;
terminal                           ADD, MINUS, MULT, DIVIDE, EXPONENT;
terminal                           AND, OR;
terminal String                    NAME;
nonterminal Program                program;
nonterminal String                 rec_decl, var_decl, proc_decl, decl;
nonterminal String                 rel_op, log_op;
nonterminal String                 exp;
nonterminal LinkedList<String>     decl_list;
start with program;

program           ::=  PROGRAM NAME:name BEGIN decl_list:dl END
                               {: LinkedList<LinkedList> l = new LinkedList<>();
                                  l.add(dl);
                                  RESULT = new Program(name, l);
                                  System.out.println(RESULT.printAst()); :}
                   ;

decl_list         ::= decl:d {: LinkedList<String> l = new LinkedList<>();
                                l.add(d);
                                RESULT = l; :}
                    |   decl_list:dl decl:d
                            {: dl.add(d); RESULT = dl; :}
                    | decl_list:dl exp:e
                            {:dl.add(e); RESULT = dl; :}
                    ;

decl              ::= REC_DECL NAME:name
                          {: RESULT = "(STRUCT " + name + ")"; :}
                    | VAR_DECL NAME:name PARAM_ID NAME:type
                          {: RESULT = "(VAR " + name + " (TYPE " + type + ") "; :}
                    | PROC_DECL NAME:name LPAR decl_list:dl RPAR BEGIN decl_list:body END
                          {: RESULT = "(PROCEDURE " + name + " " + dl + body + ")"; :}
                    | NAME:name PARAM_ID NAME:type
                          {: RESULT = "(PARAM " + name + " type: " + type + ")"; :}
                    ;

exp               ::= NAME log_op NAME {: RESULT = "They look the same"; :}
                    ;

log_op            ::= EQ {: RESULT = ""; :}
                    ;