PROGRAM            -> "program" NAME "begin" [ DECL {";" DECL}]  "end"

DECL               -> VAR_DECL | PROC_DECL | REC_DECL

VAR_DECL           -> "var" NAME ":" TYPE

PROC_DECL          -> "proc" NAME 
                      "(" [ PARAMFIELD_DECL { "," PARAMFIELD_DECL } ] ")"
                      [ ":" TYPE ]
                      "begin" [DECL{";" DECL}] "in" [STMT {";" STMT}] "end"

REC_DECL           -> "struct" NAME "{" [ PARAMFIELD_DECL {";" PARAMFIELD_DECL }]  "}"

PARAMFIELD_DECL     -> NAME ":" TYPE

EXP                -> EXP LOG_OP EXP
                    | "not" EXP
                    | EXP REL_OP EXP
                    | EXP ARIT_OP EXP
                    | LITERAL
                    | CALL_STMT
                    | "new" NAME
                    | VAR
                    | REF_VAR
                    | DEREF_VAR
                    | "(" EXP ")"


REF_VAR            -> "ref" "(" VAR ")"
DEREF_VAR          -> "deref" "(" VAR ")" | "deref" "(" DEREF_VAR ")"

VAR                -> NAME | EXP "." NAME

LOG_OP             -> "&&" | "||"

REL_OP             -> "<" | "<=" | ">" | ">=" | "=" | "<>"

ARIT_OP            -> "+" | "-" | "*" | "/" | "^"

LITERAL            -> FLOAT_LITERAL | INT_LITERAL | STRING_LITERAL
                    | "true" | "false" | "null"

STMT               -> ASSIGN_STMT
                    | IF_STMT
                    | WHILE_STMT
                    | RETURN_STMT
                    | CALL_STMT

ASSIGN_STMT        -> VAR ":=" EXP | DEREF_VAR ":=" EXP

IF_STMT            -> "if" EXP "then" { STMT ";" } "fi"
                      [ "else"  { STMT ";" } "fi" ]
WHILE_STMT         -> "while" EXP "do"  { STMT ";" } "od"

RETURN_STMT        -> "return" [ EXP ]

CALL_STMT          -> NAME "(" [ EXP { "," EXP } ] ")"

TYPE               -> "float" | "int" | "string" | "bool" | NAME
                    | "ref" "(" TYPE ")"
